// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "artifacts",
    checkConstraints: {
      artifacts_xata_id_length_xata_id: {
        name: "artifacts_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      artifacts_author_fkey: {
        name: "artifacts_author_fkey",
        columns: ["author"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      artifacts__pgroll_new_xata_id_key: {
        name: "artifacts__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "author",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "metadata",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photos",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "documents",
    checkConstraints: {
      documents_xata_id_length_xata_id: {
        name: "documents_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      documents__pgroll_new_xata_id_key: {
        name: "documents__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "content",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "embedding",
        type: "double precision[]",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "file",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "event-subject-matter-experts",
    checkConstraints: {
      "event-subject-matter-experts_xata_id_length_xata_id": {
        name: "event-subject-matter-experts_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "event-subject-matter-experts_event_fkey": {
        name: "event-subject-matter-experts_event_fkey",
        columns: ["event"],
        referencedTable: "events",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "event-subject-matter-experts_subject-matter-expert_fkey": {
        name: "event-subject-matter-experts_subject-matter-expert_fkey",
        columns: ["subject-matter-expert"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "event-subject-matter-experts__pgroll_new_xata_id_key": {
        name: "event-subject-matter-experts__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "event",
        type: "link",
        link: { table: "events" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "event-topic-subject-matter-experts",
    checkConstraints: {
      "event-topic-subject-matter-experts_xata_id_length_xata_id": {
        name: "event-topic-subject-matter-experts_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "event-topic-subject-matter-experts_event_fkey": {
        name: "event-topic-subject-matter-experts_event_fkey",
        columns: ["event"],
        referencedTable: "events",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "event-topic-subject-matter-experts_subject-matter-expert_fkey": {
        name: "event-topic-subject-matter-experts_subject-matter-expert_fkey",
        columns: ["subject-matter-expert"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "event-topic-subject-matter-experts_topic_fkey": {
        name: "event-topic-subject-matter-experts_topic_fkey",
        columns: ["topic"],
        referencedTable: "topics",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "event-topic-subject-matter-experts__pgroll_new_xata_id_key": {
        name: "event-topic-subject-matter-experts__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "event",
        type: "link",
        link: { table: "events" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "events",
    checkConstraints: {
      events_xata_id_length_xata_id: {
        name: "events_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      events__pgroll_new_xata_id_key: {
        name: "events__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "latitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "location",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "longitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photos",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "locations",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "city",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "coordinates",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "google-maps-location-id",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "latitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "longitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "state",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "organization-members",
    checkConstraints: {
      "organization-members_xata_id_length_xata_id": {
        name: "organization-members_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "organization-members_member_fkey": {
        name: "organization-members_member_fkey",
        columns: ["member"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "organization-members_organization_fkey": {
        name: "organization-members_organization_fkey",
        columns: ["organization"],
        referencedTable: "organizations",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "organization-members__pgroll_new_xata_id_key": {
        name: "organization-members__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "member",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "organization",
        type: "link",
        link: { table: "organizations" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "organizations",
    checkConstraints: {
      organizations_xata_id_length_xata_id: {
        name: "organizations_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      organizations__pgroll_new_xata_id_key: {
        name: "organizations__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "image",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photo",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "specialization",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "personnel",
    checkConstraints: {
      personnel_xata_id_length_xata_id: {
        name: "personnel_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      personnel__pgroll_new_xata_id_key: {
        name: "personnel__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
      personnel_name_key: { name: "personnel_name_key", columns: ["name"] },
    },
    columns: [
      {
        name: "bio",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "credibility",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "facebook",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "instagram",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photo",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "popularity",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "rank",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "role",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "twitter",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "website",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "sightings",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "city",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "comments",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "country",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "date_posted",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "duration_hours_min",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "duration_seconds",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "latitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "longitude",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "media_link",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "shape",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "state",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "testimonies",
    checkConstraints: {
      testimonies_xata_id_length_xata_id: {
        name: "testimonies_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      testimonies_event_fkey: {
        name: "testimonies_event_fkey",
        columns: ["event"],
        referencedTable: "events",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      testimonies_organization_fkey: {
        name: "testimonies_organization_fkey",
        columns: ["organization"],
        referencedTable: "organizations",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      testimonies_witness_fkey: {
        name: "testimonies_witness_fkey",
        columns: ["witness"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      testimonies__pgroll_new_xata_id_key: {
        name: "testimonies__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "claim",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "date",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "documentation",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "event",
        type: "link",
        link: { table: "events" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "organization",
        type: "link",
        link: { table: "organizations" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "summary",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "witness",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "topic-subject-matter-experts",
    checkConstraints: {
      "topic-subject-matter-experts_xata_id_length_xata_id": {
        name: "topic-subject-matter-experts_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "topic-subject-matter-experts_subject-matter-expert_fkey": {
        name: "topic-subject-matter-experts_subject-matter-expert_fkey",
        columns: ["subject-matter-expert"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "topic-subject-matter-experts_topic_fkey": {
        name: "topic-subject-matter-experts_topic_fkey",
        columns: ["topic"],
        referencedTable: "topics",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "topic-subject-matter-experts__pgroll_new_xata_id_key": {
        name: "topic-subject-matter-experts__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "topics",
    checkConstraints: {
      topics_xata_id_length_xata_id: {
        name: "topics_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      topics__pgroll_new_xata_id_key: {
        name: "topics__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photo",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photos",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "summary",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "topics-testimonies",
    checkConstraints: {
      "topics-testimonies_xata_id_length_xata_id": {
        name: "topics-testimonies_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "topics-testimonies_testimony_fkey": {
        name: "topics-testimonies_testimony_fkey",
        columns: ["testimony"],
        referencedTable: "testimonies",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "topics-testimonies_topic_fkey": {
        name: "topics-testimonies_topic_fkey",
        columns: ["topic"],
        referencedTable: "topics",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "topics-testimonies__pgroll_new_xata_id_key": {
        name: "topics-testimonies__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "testimony",
        type: "link",
        link: { table: "testimonies" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-documents",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-documents_document_fkey": {
        name: "user-saved-documents_document_fkey",
        columns: ["document"],
        referencedTable: "documents",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-documents_theory_fkey": {
        name: "user-saved-documents_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-documents_user_fkey": {
        name: "user-saved-documents_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "document",
        type: "link",
        link: { table: "documents" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-events",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-events_event_fkey": {
        name: "user-saved-events_event_fkey",
        columns: ["event"],
        referencedTable: "events",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-events_theory_fkey": {
        name: "user-saved-events_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-events_user_fkey": {
        name: "user-saved-events_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "event",
        type: "link",
        link: { table: "events" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-key-figure",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-key-figure_key-figure_fkey": {
        name: "user-saved-key-figure_key-figure_fkey",
        columns: ["key-figure"],
        referencedTable: "personnel",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-key-figure_theory_fkey": {
        name: "user-saved-key-figure_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-key-figure_user_fkey": {
        name: "user-saved-key-figure_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "key-figure",
        type: "link",
        link: { table: "personnel" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-organizations",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-organizations_organization_fkey": {
        name: "user-saved-organizations_organization_fkey",
        columns: ["organization"],
        referencedTable: "organizations",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-organizations_theory_fkey": {
        name: "user-saved-organizations_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-organizations_user_fkey": {
        name: "user-saved-organizations_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "organization",
        type: "link",
        link: { table: "organizations" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-sightings",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-sightings_sighting_fkey": {
        name: "user-saved-sightings_sighting_fkey",
        columns: ["sighting"],
        referencedTable: "sightings",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-sightings_theory_fkey": {
        name: "user-saved-sightings_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-sightings_user_fkey": {
        name: "user-saved-sightings_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "sighting",
        type: "link",
        link: { table: "sightings" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-testimonies",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-testimonies_testimony_fkey": {
        name: "user-saved-testimonies_testimony_fkey",
        columns: ["testimony"],
        referencedTable: "testimonies",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-testimonies_theory_fkey": {
        name: "user-saved-testimonies_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-testimonies_user_fkey": {
        name: "user-saved-testimonies_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "testimony",
        type: "link",
        link: { table: "testimonies" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-saved-topics",
    checkConstraints: {},
    foreignKeys: {
      "user-saved-topics_theory_fkey": {
        name: "user-saved-topics_theory_fkey",
        columns: ["theory"],
        referencedTable: "user-theories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-topics_topic_fkey": {
        name: "user-saved-topics_topic_fkey",
        columns: ["topic"],
        referencedTable: "topics",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      "user-saved-topics_user_fkey": {
        name: "user-saved-topics_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "note",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theory",
        type: "link",
        link: { table: "user-theories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "topic",
        type: "link",
        link: { table: "topics" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user-theories",
    checkConstraints: {
      "user-theories_xata_id_length_xata_id": {
        name: "user-theories_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      "user-theories_user_fkey": {
        name: "user-theories_user_fkey",
        columns: ["user"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      "user-theories__pgroll_new_xata_id_key": {
        name: "user-theories__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "content",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "diagrams",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "synopsis",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "users",
    checkConstraints: {
      users_xata_id_length_xata_id: {
        name: "users_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      users__pgroll_new_xata_id_key: {
        name: "users__pgroll_new_xata_id_key",
        columns: ["xata_id"],
      },
      users_email_key: { name: "users_email_key", columns: ["email"] },
    },
    columns: [
      {
        name: "email",
        type: "string",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "external_id",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "photo",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "profile_image_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Artifacts = InferredTypes["artifacts"];
export type ArtifactsRecord = Artifacts & XataRecord;

export type Documents = InferredTypes["documents"];
export type DocumentsRecord = Documents & XataRecord;

export type EventSubjectMatterExperts =
  InferredTypes["event-subject-matter-experts"];
export type EventSubjectMatterExpertsRecord = EventSubjectMatterExperts &
  XataRecord;

export type EventTopicSubjectMatterExperts =
  InferredTypes["event-topic-subject-matter-experts"];
export type EventTopicSubjectMatterExpertsRecord =
  EventTopicSubjectMatterExperts & XataRecord;

export type Events = InferredTypes["events"];
export type EventsRecord = Events & XataRecord;

export type Locations = InferredTypes["locations"];
export type LocationsRecord = Locations & XataRecord;

export type OrganizationMembers = InferredTypes["organization-members"];
export type OrganizationMembersRecord = OrganizationMembers & XataRecord;

export type Organizations = InferredTypes["organizations"];
export type OrganizationsRecord = Organizations & XataRecord;

export type Personnel = InferredTypes["personnel"];
export type PersonnelRecord = Personnel & XataRecord;

export type Sightings = InferredTypes["sightings"];
export type SightingsRecord = Sightings & XataRecord;

export type Testimonies = InferredTypes["testimonies"];
export type TestimoniesRecord = Testimonies & XataRecord;

export type TopicSubjectMatterExperts =
  InferredTypes["topic-subject-matter-experts"];
export type TopicSubjectMatterExpertsRecord = TopicSubjectMatterExperts &
  XataRecord;

export type Topics = InferredTypes["topics"];
export type TopicsRecord = Topics & XataRecord;

export type TopicsTestimonies = InferredTypes["topics-testimonies"];
export type TopicsTestimoniesRecord = TopicsTestimonies & XataRecord;

export type UserSavedDocuments = InferredTypes["user-saved-documents"];
export type UserSavedDocumentsRecord = UserSavedDocuments & XataRecord;

export type UserSavedEvents = InferredTypes["user-saved-events"];
export type UserSavedEventsRecord = UserSavedEvents & XataRecord;

export type UserSavedKeyFigure = InferredTypes["user-saved-key-figure"];
export type UserSavedKeyFigureRecord = UserSavedKeyFigure & XataRecord;

export type UserSavedOrganizations = InferredTypes["user-saved-organizations"];
export type UserSavedOrganizationsRecord = UserSavedOrganizations & XataRecord;

export type UserSavedSightings = InferredTypes["user-saved-sightings"];
export type UserSavedSightingsRecord = UserSavedSightings & XataRecord;

export type UserSavedTestimonies = InferredTypes["user-saved-testimonies"];
export type UserSavedTestimoniesRecord = UserSavedTestimonies & XataRecord;

export type UserSavedTopics = InferredTypes["user-saved-topics"];
export type UserSavedTopicsRecord = UserSavedTopics & XataRecord;

export type UserTheories = InferredTypes["user-theories"];
export type UserTheoriesRecord = UserTheories & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  artifacts: ArtifactsRecord;
  documents: DocumentsRecord;
  "event-subject-matter-experts": EventSubjectMatterExpertsRecord;
  "event-topic-subject-matter-experts": EventTopicSubjectMatterExpertsRecord;
  events: EventsRecord;
  locations: LocationsRecord;
  "organization-members": OrganizationMembersRecord;
  organizations: OrganizationsRecord;
  personnel: PersonnelRecord;
  sightings: SightingsRecord;
  testimonies: TestimoniesRecord;
  "topic-subject-matter-experts": TopicSubjectMatterExpertsRecord;
  topics: TopicsRecord;
  "topics-testimonies": TopicsTestimoniesRecord;
  "user-saved-documents": UserSavedDocumentsRecord;
  "user-saved-events": UserSavedEventsRecord;
  "user-saved-key-figure": UserSavedKeyFigureRecord;
  "user-saved-organizations": UserSavedOrganizationsRecord;
  "user-saved-sightings": UserSavedSightingsRecord;
  "user-saved-testimonies": UserSavedTestimoniesRecord;
  "user-saved-topics": UserSavedTopicsRecord;
  "user-theories": UserTheoriesRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://UltraTerrestrial-kgubvq.us-east-1.xata.sh/db/ultraterrestrial-postgres",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
