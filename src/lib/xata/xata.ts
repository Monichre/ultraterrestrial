// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "topics",
    columns: [
      { name: "name", type: "string" },
      { name: "summary", type: "text" },
    ],
    revLinks: [
      { column: "topic", table: "topic-subject-matter-experts" },
      { column: "topic", table: "event-topic-subject-matter-experts" },
      { column: "topic", table: "topics-testimonies" },
    ],
  },
  {
    name: "personnel",
    columns: [
      { name: "name", type: "string" },
      { name: "bio", type: "text" },
      { name: "role", type: "string" },
      { name: "picture", type: "text" },
      { name: "facebook", type: "string" },
      { name: "twitter", type: "string" },
      { name: "website", type: "string" },
      { name: "instagram", type: "string" },
      { name: "photo", type: "file[]" },
      { name: "rank", type: "int" },
      { name: "credibility", type: "int" },
      { name: "popularity", type: "int" },
    ],
    revLinks: [
      { column: "member", table: "organization-members" },
      {
        column: "subject-matter-expert",
        table: "event-subject-matter-experts",
      },
      {
        column: "subject-matter-expert",
        table: "topic-subject-matter-experts",
      },
      {
        column: "subject-matter-expert",
        table: "event-topic-subject-matter-experts",
      },
      { column: "witness", table: "testimonies" },
    ],
  },
  {
    name: "events",
    columns: [
      { name: "name", type: "text" },
      { name: "description", type: "text" },
      { name: "location", type: "string" },
      { name: "latitude", type: "float" },
      { name: "longitude", type: "float" },
      { name: "date", type: "datetime" },
    ],
    revLinks: [
      { column: "event", table: "event-subject-matter-experts" },
      { column: "event", table: "event-topic-subject-matter-experts" },
      { column: "event", table: "testimonies" },
    ],
  },
  {
    name: "organizations",
    columns: [
      { name: "name", type: "string" },
      { name: "specialization", type: "string" },
      { name: "description", type: "text" },
      { name: "photo", type: "text" },
    ],
    revLinks: [{ column: "organization", table: "organization-members" }],
  },
  {
    name: "sightings",
    columns: [
      { name: "date", type: "datetime" },
      { name: "description", type: "string" },
      { name: "media_link", type: "string" },
      { name: "city", type: "string" },
      { name: "state", type: "string" },
      { name: "country", type: "string" },
      { name: "shape", type: "string" },
      { name: "duration_seconds", type: "string" },
      { name: "duration_hours_min", type: "string" },
      { name: "comments", type: "string" },
      { name: "date_posted", type: "datetime" },
      { name: "latitude", type: "float" },
      { name: "longitude", type: "float" },
    ],
  },
  {
    name: "event-subject-matter-experts",
    columns: [
      { name: "event", type: "link", link: { table: "events" } },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
      },
    ],
  },
  {
    name: "topic-subject-matter-experts",
    columns: [
      { name: "topic", type: "link", link: { table: "topics" } },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
      },
    ],
  },
  {
    name: "organization-members",
    columns: [
      { name: "member", type: "link", link: { table: "personnel" } },
      { name: "organization", type: "link", link: { table: "organizations" } },
    ],
  },
  {
    name: "event-topic-subject-matter-experts",
    columns: [
      { name: "event", type: "link", link: { table: "events" } },
      {
        name: "subject-matter-expert",
        type: "link",
        link: { table: "personnel" },
      },
      { name: "topic", type: "link", link: { table: "topics" } },
    ],
  },
  {
    name: "testimonies",
    columns: [
      { name: "claim", type: "text" },
      { name: "event", type: "link", link: { table: "events" } },
      { name: "summary", type: "text" },
      { name: "witness", type: "link", link: { table: "personnel" } },
      { name: "documentation", type: "file[]" },
    ],
    revLinks: [{ column: "testimony", table: "topics-testimonies" }],
  },
  {
    name: "topics-testimonies",
    columns: [
      { name: "topic", type: "link", link: { table: "topics" } },
      { name: "testimony", type: "link", link: { table: "testimonies" } },
    ],
  },
  {
    name: "documents",
    columns: [
      { name: "file", type: "file[]" },
      { name: "content", type: "text" },
      { name: "embedding", type: "vector", vector: { dimension: 1536 } },
      { name: "title", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Topics = InferredTypes["topics"];
export type TopicsRecord = Topics & XataRecord;

export type Personnel = InferredTypes["personnel"];
export type PersonnelRecord = Personnel & XataRecord;

export type Events = InferredTypes["events"];
export type EventsRecord = Events & XataRecord;

export type Organizations = InferredTypes["organizations"];
export type OrganizationsRecord = Organizations & XataRecord;

export type Sightings = InferredTypes["sightings"];
export type SightingsRecord = Sightings & XataRecord;

export type EventSubjectMatterExperts =
  InferredTypes["event-subject-matter-experts"];
export type EventSubjectMatterExpertsRecord = EventSubjectMatterExperts &
  XataRecord;

export type TopicSubjectMatterExperts =
  InferredTypes["topic-subject-matter-experts"];
export type TopicSubjectMatterExpertsRecord = TopicSubjectMatterExperts &
  XataRecord;

export type OrganizationMembers = InferredTypes["organization-members"];
export type OrganizationMembersRecord = OrganizationMembers & XataRecord;

export type EventTopicSubjectMatterExperts =
  InferredTypes["event-topic-subject-matter-experts"];
export type EventTopicSubjectMatterExpertsRecord =
  EventTopicSubjectMatterExperts & XataRecord;

export type Testimonies = InferredTypes["testimonies"];
export type TestimoniesRecord = Testimonies & XataRecord;

export type TopicsTestimonies = InferredTypes["topics-testimonies"];
export type TopicsTestimoniesRecord = TopicsTestimonies & XataRecord;

export type Documents = InferredTypes["documents"];
export type DocumentsRecord = Documents & XataRecord;

export type DatabaseSchema = {
  topics: TopicsRecord;
  personnel: PersonnelRecord;
  events: EventsRecord;
  organizations: OrganizationsRecord;
  sightings: SightingsRecord;
  "event-subject-matter-experts": EventSubjectMatterExpertsRecord;
  "topic-subject-matter-experts": TopicSubjectMatterExpertsRecord;
  "organization-members": OrganizationMembersRecord;
  "event-topic-subject-matter-experts": EventTopicSubjectMatterExpertsRecord;
  testimonies: TestimoniesRecord;
  "topics-testimonies": TopicsTestimoniesRecord;
  documents: DocumentsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://UltraTerrestrial-kgubvq.us-east-1.xata.sh/db/ultraterrestrial",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
